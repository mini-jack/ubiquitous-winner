*&---------------------------------------------------------------------*
*& Report ZBC401_U10
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zbc401_u13.
TYPE-POOLS icon.

INCLUDE zbc401_u13_interface.
INCLUDE zbc401_u13_planes.
INCLUDE zbc401_u13_vehicles.
INCLUDE zbc401_u13_agency.


DATA:r_plane           TYPE REF TO lcl_planes,
     r_passenger_plane TYPE REF TO lcl_passenger_plane,
     r_cargo_plane     TYPE REF TO lcl_cargo_plane,
     r_carrier         TYPE REF TO  lcl_carrier,
     count             TYPE i,
     r_rental          TYPE REF TO lcl_rental,
     r_truck           TYPE REF TO  lcl_truck,
     r_bus             TYPE REF TO lcl_bus,
     r_lif             TYPE REF TO lif_partners,
     r_travel_agency   TYPE REF TO lcl_travel_agency.

START-OF-SELECTION.

  CREATE OBJECT r_carrier
    EXPORTING
      im_name = 'Simple travel'.

  lcl_planes=>display_n_o_planetype( ).

  CREATE OBJECT r_plane
    EXPORTING
      im_name      = 'LH'
      im_planetype = '146-200'.
  r_carrier->add_airplane( r_plane ).

  CREATE OBJECT r_plane
    EXPORTING
      im_name      = 'BN'
      im_planetype = '146-300'.
  r_carrier->add_airplane( r_plane ).

  CREATE OBJECT r_passenger_plane
    EXPORTING
      im_name      = 'PP'
      im_seats     = 100
      im_planetype = 'CONCORDE'.
*  r_carrier->add_airplane( r_passenger_plane ).

  CREATE OBJECT r_cargo_plane
    EXPORTING
      im_name      = 'CP'
      im_cargo     = 100
      im_planetype = 'A300-600ST'.

  CREATE OBJECT r_rental
    EXPORTING
      im_name = 'happy car rental'.

  CREATE OBJECT r_truck
    EXPORTING
      im_make  = 'MAN'
      im_cargo = 300.
  r_rental->add_vehicle( r_truck ).

  CREATE OBJECT r_bus
    EXPORTING
      im_make       = 'volvo'
      im_passengers = 45.
  r_rental->add_vehicle( r_bus ).

  CREATE OBJECT r_travel_agency
    EXPORTING
      im_name = 'fly and smile travel'.
  r_travel_agency->add_partner( r_carrier ) .
  r_travel_agency->add_partner( r_rental ).
  r_travel_agency->display_attributes( ).

  r_carrier->add_airplane( r_cargo_plane ).

*  r_carrier->display_attributes( ).
  r_carrier->lif_partners~display_partner( ).
  count = r_plane->get_n_o_planes( ).
  SKIP 2.
  WRITE: / 'Num of planes'(ca1), count.

*&---------------------------------------------------------------------*
*& Include          ZBC401_U10_INTERFACE
*&---------------------------------------------------------------------*


INTERFACE lif_partners.
  METHODS: display_partner.
  EVENTS: partner_created.
ENDINTERFACE.

*&---------------------------------------------------------------------*
*& Include          ZBC401_U03_EQ
*&---------------------------------------------------------------------*

TYPE-POOLS icon.
*---------------------------------------------------------------------*
* CLASS lcl_planes DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_planes DEFINITION.
  PUBLIC SECTION.
    CONSTANTS: pos_1 TYPE i VALUE 40.
    METHODS: constructor
      IMPORTING im_name      TYPE string
                im_planetype TYPE saplane-planetype,
      display_attributes,
      add_airplane
        IMPORTING
          im_plane TYPE REF TO lcl_planes.
    CLASS-METHODS:
      class_constructor,
      display_n_o_planetype,
      get_n_o_planes RETURNING VALUE(re_count) TYPE i.
    EVENTS plane_created.
  PRIVATE SECTION.
    DATA: name       TYPE string,
          planetype  TYPE saplane-planetype,
          plane_list TYPE TABLE OF REF TO lcl_planes.
    CLASS-DATA n_o_planes TYPE i.
    CLASS-DATA list_of_planetypes TYPE TABLE OF saplane.
    CLASS-METHODS:
      get_technical_atributes
        IMPORTING
          im_type    TYPE saplane-planetype
        EXPORTING
          ex_weight  TYPE s_plan_wei
          ex_tankcap TYPE s_capacity
        EXCEPTIONS
          wrong_planetype.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_passenger_plane DEFINITION INHERITING FROM lcl_planes.
  PUBLIC SECTION.
    METHODS: constructor
      IMPORTING
        im_name      TYPE string
        im_planetype TYPE saplane-planetype
        im_seats     TYPE sflight-seatsmax.
    METHODS: display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: max_seats TYPE sflight-seatsmax.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_cargo_plane DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_cargo_plane DEFINITION INHERITING FROM lcl_planes.
  PUBLIC SECTION.
    METHODS: constructor
      IMPORTING
        im_name      TYPE string
        im_planetype TYPE saplane-planetype
        im_cargo     TYPE scplane-cargomax.
    METHODS: display_attributes REDEFINITION.
    METHODS: get_cargo RETURNING VALUE(re_cargo) TYPE  scplane-cargomax.
  PRIVATE SECTION.
    DATA: max_cargo TYPE scplane-cargomax.
ENDCLASS.

*---------------------------------------------------------------------*
* CLASS lcl_carrier DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_carrier DEFINITION.

  PUBLIC SECTION.
    INTERFACES lif_partners.

    METHODS: constructor  IMPORTING im_name TYPE string,
      add_airplane for EVENT plane_created of lcl_planes IMPORTING sender,
      get_name     RETURNING VALUE(re_name) TYPE string,
      display_airplanes,
      display_attributes,
      get_highest_cargo RETURNING VALUE(re_cargo) TYPE s_plan_car.
  PRIVATE SECTION.
    DATA: name          TYPE string,
          airplane_list TYPE TABLE OF REF TO lcl_planes.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_planes IMPLEMENTATION.
  METHOD class_constructor.
    SELECT * FROM saplane INTO TABLE list_of_planetypes.
  ENDMETHOD.
  METHOD constructor.
    name = im_name.
    planetype = im_planetype.
    n_o_planes = n_o_planes + 1.
    RAISE EVENT plane_created.
  ENDMETHOD.
  METHOD display_attributes.
    DATA: weight  TYPE saplane-weight,
          cap     TYPE saplane-tankcap,
          r_plane TYPE REF TO lcl_planes.
    get_technical_atributes(
    EXPORTING
      im_type = planetype
      IMPORTING
        ex_weight = weight
        ex_tankcap = cap
        EXCEPTIONS
          wrong_planetype = 4 ).
    LOOP AT plane_list INTO r_plane.
      WRITE: / icon_equipment AS ICON,
      / 'name of plane'(001), AT pos_1 name,
      / 'plane type'(002), AT pos_1 planetype.
      IF sy-subrc <> 0.
        WRITE: / icon_failure AS ICON, 'WRONG_PLANETYPE'.
      ELSE.
        WRITE: / 'weight of airplane'(003),
        AT pos_1 weight LEFT-JUSTIFIED,
        / 'tank capacity of airplane '(004),
        AT pos_1 cap LEFT-JUSTIFIED.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD add_airplane.
    APPEND im_plane TO  plane_list.
  ENDMETHOD.
  METHOD display_n_o_planetype.
    WRITE:  /, / 'Total number of planes'(ca1),
AT pos_1 n_o_planes LEFT-JUSTIFIED, /.
  ENDMETHOD.
  METHOD get_n_o_planes.
    re_count = n_o_planes.
  ENDMETHOD.
  METHOD get_technical_atributes.
    DATA: wa TYPE saplane.
    READ TABLE list_of_planetypes INTO wa
    WITH KEY planetype = im_type mandt = 100
    TRANSPORTING weight tankcap.
    IF sy-subrc = 0.
      ex_weight = wa-weight.
      ex_tankcap = wa-tankcap.
    ELSE.
      RAISE wrong_planetype.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_passenger_plane IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor(
      EXPORTING
        im_name      = im_name
        im_planetype = im_planetype ).
    max_seats = im_seats.
  ENDMETHOD. "constructor
  METHOD display_attributes.
    CALL METHOD super->display_attributes( ) .
    WRITE: / 'max seats = '(005),
      AT pos_1 max_seats LEFT-JUSTIFIED.
    ULINE.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_cargo_plane IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor(
      EXPORTING
        im_name      = im_name
        im_planetype = im_planetype ).
    max_cargo = im_cargo.
  ENDMETHOD.
  METHOD display_attributes.
    CALL METHOD super->display_attributes( ) .
    WRITE: / 'Max Cargo = '(005),
      AT pos_1 max_cargo LEFT-JUSTIFIED.
    ULINE.
  ENDMETHOD.
  METHOD get_cargo.
    re_cargo = max_cargo.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_carrier IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_carrier IMPLEMENTATION.
  METHOD constructor.
    name = im_name.
    set HANDLER add_airplane for all INSTANCES.
    RAISE event lif_partners~partner_created.
  ENDMETHOD.
  METHOD add_airplane.
    APPEND sender TO airplane_list.
  ENDMETHOD.
  METHOD get_name.
    re_name = name.
  ENDMETHOD.
  METHOD display_airplanes.

  ENDMETHOD.
  method lif_partners~display_partner.
    display_attributes( ).
    ENDMETHOD.
  METHOD display_attributes.
    DATA: r_plane TYPE REF TO lcl_planes.
    LOOP AT airplane_list INTO r_plane.
      r_plane->display_attributes( ).
    ENDLOOP.
  ENDMETHOD.
  METHOD get_highest_cargo.

    DATA: r_cargo TYPE REF TO lcl_cargo_plane.
    DATA: r_plane TYPE REF TO lcl_planes.
    DATA: cargo TYPE s_plan_car.
    DATA: r_exc TYPE REF TO cx_root.
    LOOP AT airplane_list INTO r_plane.
      TRY.
          r_cargo ?= r_plane.
          cargo = r_cargo->get_cargo( ).
          IF re_cargo < cargo.
            re_cargo = cargo.
          ENDIF.
        CATCH cx_sy_move_cast_error INTO r_exc. "*** no cargoplane
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.

*&---------------------------------------------------------------------*
*& Include          ZBC401_U10_VEHICLES
*&---------------------------------------------------------------------*


CLASS lcl_vehicle DEFINITION.
  PUBLIC SECTION.
    METHODS constructor IMPORTING im_make TYPE string.
    METHODS:get_average_fuel IMPORTING
                                       im_distance       TYPE s_distance
                                       im_fuel           TYPE s_capacity
                             RETURNING VALUE(re_avgfuel) TYPE s_consum.
    METHODS:display_attributes.
    METHODS: get_make EXPORTING ex_make TYPE string.
    METHODS: set_make IMPORTING im_make TYPE string.
    CLASS-METHODS: get_count EXPORTING re_count TYPE i.
    EVENTS: vehicle_created.
  PRIVATE SECTION.
    DATA: make TYPE string.
    METHODS: init_make.
    CLASS-DATA n_o_vehicles TYPE i.
ENDCLASS.

CLASS lcl_vehicle IMPLEMENTATION.
  METHOD constructor.
    make = im_make.
    ADD 1 TO n_o_vehicles.
    RAISE EVENT vehicle_created.
  ENDMETHOD.
  METHOD get_average_fuel.
    re_avgfuel = im_distance / im_fuel.
  ENDMETHOD.
  METHOD display_attributes.
    WRITE: make.
  ENDMETHOD.
  METHOD get_make.
    ex_make = make.
  ENDMETHOD.
  METHOD set_make.
    IF im_make IS INITIAL.
      init_make( ).
    ELSE.
      make = im_make.
    ENDIF.
  ENDMETHOD.
  METHOD get_count.
    re_count = n_o_vehicles.

  ENDMETHOD.
  METHOD init_make.
    make = 'default make'.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_truck DEFINITION INHERITING FROM lcl_vehicle.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_make  TYPE string
                                   im_cargo TYPE s_plan_car.
    METHODS: display_attributes REDEFINITION.
    METHODS: get_cargo RETURNING VALUE(re_cargo) TYPE s_plan_car.

  PRIVATE SECTION.
    DATA:max_cargo TYPE s_plan_car.
ENDCLASS.

CLASS lcl_truck IMPLEMENTATION.
  METHOD constructor.

    super->constructor( im_make ).
    max_cargo = im_cargo.
  ENDMETHOD.
  METHOD display_attributes.
    WRITE: / icon_ws_truck AS ICON.
    super->display_attributes( ) .
    WRITE: 20 ' Cargo = ', max_cargo.
    ULINE.
  ENDMETHOD.
  METHOD get_cargo.
    re_cargo = max_cargo.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_bus DEFINITION INHERITING FROM lcl_vehicle.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_make       TYPE string
                                   im_passengers TYPE i.
    METHODS: display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: max_passengers TYPE i.
ENDCLASS.

CLASS lcl_bus IMPLEMENTATION.
  METHOD constructor.
    super->constructor( im_make ).
    max_passengers = im_passengers.
  ENDMETHOD.
  METHOD display_attributes.
    WRITE: / icon_transportation_mode AS ICON.
    super->display_attributes( ).
    WRITE: 20 ' Passengers = ', max_passengers.
    ULINE.
  ENDMETHOD.
ENDCLASS.


CLASS lcl_rental DEFINITION.
  PUBLIC SECTION.
    INTERFACES lif_partners.
    METHODS: constructor IMPORTING im_name TYPE string.
    METHODS: add_vehicle FOR EVENT vehicle_created OF lcl_vehicle IMPORTING sender.
    METHODS: display_attributes.
  PRIVATE SECTION.
    DATA: name         TYPE string,
          vehicle_list TYPE TABLE OF REF TO lcl_vehicle.
ENDCLASS.

CLASS lcl_rental IMPLEMENTATION.
  METHOD lif_partners~display_partner.
    display_attributes( ).
  ENDMETHOD.
  METHOD constructor.
    name = im_name.
    SET HANDLER add_vehicle FOR ALL INSTANCES.
    RAISE event lif_partners~partner_created.
  ENDMETHOD.
  METHOD add_vehicle.
    APPEND sender TO vehicle_list.
  ENDMETHOD.
  METHOD display_attributes.
    DATA: r_vehicle TYPE REF TO lcl_vehicle.
    WRITE: / icon_transport_proposal AS ICON, name.
    WRITE: ' Here comes the vehicle list: '.
    ULINE.
    ULINE.
    LOOP AT vehicle_list INTO r_vehicle.
      r_vehicle->display_attributes( ).
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.

*&---------------------------------------------------------------------*
*& Include          ZBC401_U11_AGENCY
*&---------------------------------------------------------------------*
CLASS lcl_travel_agency DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_name TYPE string.
    METHODS: display_attributes.
    METHODS: add_partner FOR EVENT partner_created OF lif_partners IMPORTING sender.
    METHODS: display_agency_partners.
  PRIVATE SECTION.
    DATA: name         TYPE string,
          partner_list TYPE TABLE OF REF TO lif_partners.

ENDCLASS.

CLASS lcl_travel_agency IMPLEMENTATION.
  METHOD constructor.
    name = im_name.
    SET HANDLER add_partner FOR ALL INSTANCES.
  ENDMETHOD.
  METHOD add_partner.
    APPEND sender TO partner_list.
  ENDMETHOD.
  METHOD display_agency_partners.
    DATA: r_partner TYPE REF TO lif_partners.
    WRITE: icon_dependents AS ICON, name.
    WRITE: ' Here are the partners of the travel agency: '. ULINE.
    LOOP AT partner_list INTO r_partner.
      r_partner->display_partner( ).
    ENDLOOP.

  ENDMETHOD.
  METHOD display_attributes.
    WRITE: / 'name of agency', name. ULINE.
    WRITE: / 'agency partners'. display_agency_partners( ).
  ENDMETHOD.
ENDCLASS.
*&---------------------------------------------------------------------*
*& Report ZBC401_U03
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zbc401_u09.
TYPE-POOLS icon.
INCLUDE zbc401_u09_pl.
DATA:r_plane           TYPE REF TO lcl_planes,
     r_passenger_plane TYPE REF TO lcl_passenger_plane,
     r_cargo_plane     TYPE REF TO lcl_cargo_plane,
     r_carrier         TYPE REF TO  lcl_carrier,
     count             TYPE i.

START-OF-SELECTION.

  CREATE OBJECT r_carrier
    EXPORTING
      im_name = 'Simple travel'.

  lcl_planes=>display_n_o_planetype( ).

  CREATE OBJECT r_plane
    EXPORTING
      im_name      = 'LH'
      im_planetype = '146-200'.
  r_carrier->add_airplane( r_plane ).
*  APPEND r_plane TO plane_list.
  CREATE OBJECT r_plane
    EXPORTING
      im_name      = 'BN'
      im_planetype = '146-300'.
  r_carrier->add_airplane( r_plane ).
*  APPEND r_plane TO plane_list.
  CREATE OBJECT r_passenger_plane
    EXPORTING
      im_name      = 'PP'
      im_seats     = 100
      im_planetype = 'CONCORDE'.
  r_carrier->add_airplane( r_passenger_plane ).
*  APPEND r_passenger_plane TO plane_list.
  CREATE OBJECT r_cargo_plane
    EXPORTING
      im_name      = 'CP'
      im_cargo     = 100
      im_planetype = 'A300-600ST'.
  r_carrier->add_airplane( r_cargo_plane ).
*  APPEND r_cargo_plane TO plane_list.
  r_carrier->display_attributes( ).
  count = r_plane->get_n_o_planes( ).
  SKIP 2.
  WRITE: / 'Num of planes'(ca1), count.

*&---------------------------------------------------------------------*
*& Include          ZBC401_U03_EQ
*&---------------------------------------------------------------------*

TYPE-POOLS icon.
*---------------------------------------------------------------------*
* CLASS lcl_planes DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_planes DEFINITION.
  PUBLIC SECTION.
    CONSTANTS: pos_1 TYPE i VALUE 40.
    METHODS: constructor
      IMPORTING im_name      TYPE string
                im_planetype TYPE saplane-planetype,
      display_attributes,
      add_airplane
        IMPORTING
          im_plane TYPE REF TO lcl_planes.
    CLASS-METHODS:
      class_constructor,
      display_n_o_planetype,
      get_n_o_planes RETURNING VALUE(re_count) TYPE i.
  PRIVATE SECTION.
    DATA: name       TYPE string,
          planetype  TYPE saplane-planetype,
          plane_list TYPE TABLE OF REF TO lcl_planes.
    CLASS-DATA n_o_planes TYPE i.
    CLASS-DATA list_of_planetypes TYPE TABLE OF saplane.
    CLASS-METHODS:
      get_technical_atributes
        IMPORTING
          im_type    TYPE saplane-planetype
        EXPORTING
          ex_weight  TYPE s_plan_wei
          ex_tankcap TYPE s_capacity
        EXCEPTIONS
          wrong_planetype.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_passenger_plane DEFINITION INHERITING FROM lcl_planes.
  PUBLIC SECTION.
    METHODS: constructor
      IMPORTING
        im_name      TYPE string
        im_planetype TYPE saplane-planetype
        im_seats     TYPE sflight-seatsmax.
    METHODS: display_attributes REDEFINITION.
  PRIVATE SECTION.
    DATA: max_seats TYPE sflight-seatsmax.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_cargo_plane DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_cargo_plane DEFINITION INHERITING FROM lcl_planes.
  PUBLIC SECTION.
    METHODS: constructor
      IMPORTING
        im_name      TYPE string
        im_planetype TYPE saplane-planetype
        im_cargo     TYPE scplane-cargomax.
    METHODS: display_attributes REDEFINITION.
    METHODS: get_cargo RETURNING VALUE(re_cargo) TYPE  scplane-cargomax.
  PRIVATE SECTION.
    DATA: max_cargo TYPE scplane-cargomax.
ENDCLASS.

*---------------------------------------------------------------------*
* CLASS lcl_carrier DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_carrier DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor  IMPORTING im_name TYPE string,
      add_airplane IMPORTING im_plane TYPE REF TO lcl_planes,
      get_name     RETURNING VALUE(re_name) TYPE string,
      display_airplanes,
      display_attributes,
      get_highest_cargo RETURNING VALUE(re_cargo) TYPE s_plan_car.
  PRIVATE SECTION.
    DATA: name          TYPE string,
          airplane_list TYPE TABLE OF REF TO lcl_planes.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_planes IMPLEMENTATION.
  METHOD class_constructor.
    SELECT * FROM saplane INTO TABLE list_of_planetypes.
  ENDMETHOD.
  METHOD constructor.
    name = im_name.
    planetype = im_planetype.
    n_o_planes = n_o_planes + 1.
  ENDMETHOD.
  METHOD display_attributes.
    DATA: weight  TYPE saplane-weight,
          cap     TYPE saplane-tankcap,
          r_plane TYPE REF TO lcl_planes.
    get_technical_atributes(
    EXPORTING
      im_type = planetype
      IMPORTING
        ex_weight = weight
        ex_tankcap = cap
        EXCEPTIONS
          wrong_planetype = 4 ).
    LOOP AT plane_list INTO r_plane.
      WRITE: / icon_equipment AS ICON,
      / 'name of plane'(001), AT pos_1 name,
      / 'plane type'(002), AT pos_1 planetype.
      IF sy-subrc <> 0.
        WRITE: / icon_failure AS ICON, 'WRONG_PLANETYPE'.
      ELSE.
        WRITE: / 'weight of airplane'(003),
        AT pos_1 weight LEFT-JUSTIFIED,
        / 'tank capacity of airplane '(004),
        AT pos_1 cap LEFT-JUSTIFIED.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD add_airplane.
    APPEND im_plane TO  plane_list.
  ENDMETHOD.
  METHOD display_n_o_planetype.
    WRITE:  /, / 'Total number of planes'(ca1),
AT pos_1 n_o_planes LEFT-JUSTIFIED, /.
  ENDMETHOD.
  METHOD get_n_o_planes.
    re_count = n_o_planes.
  ENDMETHOD.
  METHOD get_technical_atributes.
    DATA: wa TYPE saplane.
    READ TABLE list_of_planetypes INTO wa
    WITH KEY planetype = im_type mandt = 100
    TRANSPORTING weight tankcap.
    IF sy-subrc = 0.
      ex_weight = wa-weight.
      ex_tankcap = wa-tankcap.
    ELSE.
      RAISE wrong_planetype.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_passenger_plane IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor(
      EXPORTING
        im_name      = im_name
        im_planetype = im_planetype ).
    max_seats = im_seats.
  ENDMETHOD. "constructor
  METHOD display_attributes.
    CALL METHOD super->display_attributes( ) .
    WRITE: / 'max seats = '(005),
      AT pos_1 max_seats LEFT-JUSTIFIED.
    ULINE.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_passenger_plane IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_cargo_plane IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor(
      EXPORTING
        im_name      = im_name
        im_planetype = im_planetype ).
    max_cargo = im_cargo.
  ENDMETHOD.
  METHOD display_attributes.
    CALL METHOD super->display_attributes( ) .
    WRITE: / 'Max Cargo = '(005),
      AT pos_1 max_cargo LEFT-JUSTIFIED.
    ULINE.
  ENDMETHOD.
  METHOD get_cargo.
    re_cargo = max_cargo.
  ENDMETHOD.
ENDCLASS.
*---------------------------------------------------------------------*
* CLASS lcl_carrier IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_carrier IMPLEMENTATION.
  METHOD constructor.
    name = im_name.
  ENDMETHOD.
  METHOD add_airplane.
    APPEND im_plane TO airplane_list.
  ENDMETHOD.
  METHOD get_name.
    re_name = name.
  ENDMETHOD.
  METHOD display_airplanes.

  ENDMETHOD.
  METHOD display_attributes.
    DATA: r_plane TYPE REF TO lcl_planes.
    LOOP AT airplane_list INTO r_plane.
      r_plane->display_attributes( ).
    ENDLOOP.
  ENDMETHOD.
  METHOD get_highest_cargo.

    DATA: r_cargo TYPE REF TO lcl_cargo_plane.
    DATA: r_plane TYPE REF TO lcl_planes.
    DATA: cargo TYPE s_plan_car.
    DATA: r_exc TYPE REF TO cx_root.
    LOOP AT airplane_list INTO r_plane.
      TRY.
          r_cargo ?= r_plane.
          cargo = r_cargo->get_cargo( ).
          IF re_cargo < cargo.
            re_cargo = cargo.
          ENDIF.
          CATCH cx_sy_move_cast_error INTO r_exc. "*** no cargoplane
      ENDTRY.
      ENDLOOP.
    ENDMETHOD.
ENDCLASS.